diff --git a/node_modules/react-native-macos/Libraries/Text/TextInput/Multiline/RCTUITextView.m b/node_modules/react-native-macos/Libraries/Text/TextInput/Multiline/RCTUITextView.m
index 533f244..7d1d740 100644
--- a/node_modules/react-native-macos/Libraries/Text/TextInput/Multiline/RCTUITextView.m
+++ b/node_modules/react-native-macos/Libraries/Text/TextInput/Multiline/RCTUITextView.m
@@ -48,7 +48,7 @@ static RCTUIColor *defaultPlaceholderColor() // TODO(OSS Candidate ISS#2710739)
 #else // [TODO(macOS GH#774)
     NSTextCheckingTypes checkingTypes = 0;
     self.enabledTextCheckingTypes = checkingTypes;
-    self.insertionPointColor = [NSColor selectedControlColor];
+    self.insertionPointColor = self.selectionColor;
     // Fix blurry text on non-retina displays.
     self.canDrawSubviewsIntoLayer = YES;
 #endif // ]TODO(macOS GH#774)
@@ -130,9 +130,10 @@ static RCTUIColor *defaultPlaceholderColor() // TODO(OSS Candidate ISS#2710739)
 - (void)setSelectionColor:(RCTUIColor *)selectionColor
 {
   NSMutableDictionary *selectTextAttributes = self.selectedTextAttributes.mutableCopy;
-  selectTextAttributes[NSBackgroundColorAttributeName] = selectionColor ?: [NSColor selectedControlColor];
+//    self.selectionColor = selectionColor;
+//  selectTextAttributes[NSBackgroundColorAttributeName] = [NSColor selectedControlColor];
   self.selectedTextAttributes = selectTextAttributes.copy;
-  self.insertionPointColor = self.selectionColor ?: [NSColor selectedControlColor];
+  self.insertionPointColor = selectionColor ?: [NSColor selectedControlColor];
 }
 
 - (RCTUIColor*)selectionColor
diff --git a/node_modules/react-native-macos/Libraries/Text/TextInput/Singleline/RCTUITextField.m b/node_modules/react-native-macos/Libraries/Text/TextInput/Singleline/RCTUITextField.m
index 98cb1bd..65a8f3f 100644
--- a/node_modules/react-native-macos/Libraries/Text/TextInput/Singleline/RCTUITextField.m
+++ b/node_modules/react-native-macos/Libraries/Text/TextInput/Singleline/RCTUITextField.m
@@ -71,7 +71,7 @@
   fieldEditor.automaticSpellingCorrectionEnabled = self.isAutomaticSpellingCorrectionEnabled;
   fieldEditor.automaticTextReplacementEnabled = self.isAutomaticTextReplacementEnabled;
   NSMutableDictionary *selectTextAttributes = fieldEditor.selectedTextAttributes.mutableCopy;
-  selectTextAttributes[NSBackgroundColorAttributeName] = self.selectionColor ?: [NSColor selectedControlColor];
+//  selectTextAttributes[NSBackgroundColorAttributeName] = self.selectionColor ?: [NSColor selectedControlColor];
 	fieldEditor.selectedTextAttributes = selectTextAttributes;
   fieldEditor.insertionPointColor = self.selectionColor ?: [RCTUIColor selectedControlColor];
   return fieldEditor;
@@ -121,6 +121,10 @@
 #if TARGET_OS_OSX // [TODO(macOS GH#774)
   [self setAttributedText:[[NSAttributedString alloc] initWithString:[self text]
                                                           attributes:[self defaultTextAttributes]]];
+// TODO this tricks the caret to remain at a constant size, however it still wrong
+    if([[self text] length] == 0) {
+        self.font = [[self defaultTextAttributes] objectForKey:NSFontAttributeName];
+    }
 #endif // ]TODO(macOS GH#774)
 }
 
@@ -286,6 +290,9 @@
 #if TARGET_OS_OSX // [TODO(macOS GH#774)
   [self setAttributedText:[[NSAttributedString alloc] initWithString:[self text]
                                                           attributes:[self defaultTextAttributes]]];
+
+    self.font = [[self defaultTextAttributes] objectForKey:NSFontAttributeName];
+
 #endif // ]TODO(macOS GH#774)
 }
 
@@ -432,8 +439,9 @@
 {
   id<RCTUITextFieldDelegate> delegate = self.delegate;
   if ([delegate respondsToSelector:@selector(textField:shouldChangeCharactersInRange:replacementString:)]) {
-    return [delegate textField:self shouldChangeCharactersInRange:aRange replacementString:aString];
+      return [delegate textField:self shouldChangeCharactersInRange:aRange replacementString:aString];
   }
+
   return NO;
 }
   